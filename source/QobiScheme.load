;;; LaHaShem HaAretz U'Mloah
;;; Copyright 1993, 1994, and 1995 University of Toronto. All rights reserved.
;;; Copyright 1996 Technion. All rights reserved.
;;; Copyright 1996 and 1997 University of Vermont. All rights reserved.
;;; Copyright 1997, 1998, 1999, 2000, and 2001 NEC Research Institute, Inc. All
;;; rights reserved.
;;; Copyright 2002, 2003, 2004, 2005, and 2006 Purdue University. All rights
;;; reserved.

(define-macro while
 (lambda (form expander)
  (let ((loop (string->uninterned-symbol "loop")))
   (expander
    `(begin (define (,loop) (when ,(second form) ,@(rest (rest form)) (,loop)))
	    (,loop))
    expander))))

(define-macro define-structure
 ;; needs work: To check that SLOTS is disjoint.
 (lambda (form expander)
  (unless (and (>= (length form) 3)
	       (let loop ((x (cdr form)))
		(or (null? x) (and (symbol? (car x)) (loop (cdr x))))))
   (error 'define-structure "Improper DEFINE-STRUCTURE: ~s" form))
  (expander
   (let ((type (second form))
	 (slots (rest (rest form)))
         (v (string->uninterned-symbol "v")))
    `(begin
      (define (,(string->symbol (string-append "MAKE-" (symbol->string type)))
	       ,@slots)
       (let ((,v (make-vector ,(+ (length slots) 1))))
	(vector-set! ,v 0 ',type)
	,@(map-indexed (lambda (s i) `(vector-set! ,v ,(+ i 1) ,s)) slots)
	,v))
      (define (,(string->symbol (string-append (symbol->string type) "?"))
	       obj)
       (and (vector? obj)
	    (= (vector-length obj) ,(- (length form) 1))
	    (eq? (vector-ref obj 0) ',type)))
      ,@(map-indexed
	 (lambda (slot i)
	  `(begin
	    (define (,(string->symbol
		       (string-append "LOCAL-SET-"
				      (symbol->string type)
				      "-"
				      (symbol->string slot)
				      "!"))
		     type
		     obj)
	     (unless (,(string->symbol
			(string-append (symbol->string type) "?"))
		      type)
	      (panic ,(string-append "LOCAL-SET-"
				     (symbol->string type)
				     "-"
				     (symbol->string slot)
				     "! error")))
	     (local-vector-set! type ,(+ i 1) obj))
	    (define (,(string->symbol
		       (string-append (symbol->string type)
				      "-"
				      (symbol->string slot)))
		     type)
	     (unless (,(string->symbol
			(string-append (symbol->string type) "?"))
		      type)
	      (panic ,(string-append (symbol->string type)
				     "-"
				     (symbol->string slot)
				     " error")))
	     (vector-ref type ,(+ i 1)))
	    (define (,(string->symbol
		       (string-append "SET-"
				      (symbol->string type)
				      "-"
				      (symbol->string slot)
				      "!"))
		     type
		     obj)
	     (unless (,(string->symbol
			(string-append (symbol->string type) "?"))
		      type)
	      (panic ,(string-append "SET-"
				     (symbol->string type)
				     "-"
				     (symbol->string slot)
				     "! error")))
	     (vector-set! type ,(+ i 1) obj))))
	 slots)))
   expander)))

(define-macro define-structure-external
 ;; needs work: To check that SLOTS is disjoint.
 (lambda (form expander)
  (unless (and (>= (length form) 3)
	       (let loop ((x (cdr form)))
		(or (null? x) (and (symbol? (car x)) (loop (cdr x))))))
   (error 'define-structure-external
	  "Improper DEFINE-STRUCTURE-EXTERNAL: ~s" form))
  (expander
   (let ((module (second form))
	 (type (third form))
	 (slots (rest (rest (rest form)))))
    `(begin
      (define-external
       (,(string->symbol (string-append "MAKE-" (symbol->string type)))
	,@slots)
       ,module)
      (define-external
       (,(string->symbol (string-append (symbol->string type) "?")) obj)
       ,module)
      ,@(map-indexed
	 (lambda (slot i)
	  `(begin
	    (define-external (,(string->symbol
				(string-append "LOCAL-SET-"
					       (symbol->string type)
					       "-"
					       (symbol->string slot)
					       "!"))
			      type
			      obj)
	     ,module)
	    (define-external (,(string->symbol
				(string-append (symbol->string type)
					       "-"
					       (symbol->string slot)))
			      type)
	     ,module)
	    (define-external (,(string->symbol
				(string-append "SET-"
					       (symbol->string type)
					       "-"
					       (symbol->string slot)
					       "!"))
			      type
			      obj)
	     ,module)))
	 slots)))
   expander)))

(define-macro either
 (lambda (form expander)
  (expander
   (cond
    ((null? (rest form)) '(fail))
    ((null? (rest (rest form))) (second form))
    (else `(if (a-boolean) ,(second form) (either ,@(rest (rest form))))))
   expander)))

(define-macro for-effects
 (lambda (form expander)
  (let ((return (string->uninterned-symbol "return"))
	(old-fail (string->uninterned-symbol "old-fail")))
   (expander `(call-with-current-continuation
	       (lambda (,return)
		(let ((,old-fail fail))
		 (set-fail! (lambda () (set-fail! ,old-fail) (,return #f)))
		 (begin ,@(rest form))
		 (fail))))
	     expander))))

(define-macro one-value
 (lambda (form expander)
  (unless (or (= (length form) 2) (= (length form) 3))
   (error 'one-value "Improper ONE-VALUE: ~s" form))
  (let ((form1 (second form))
	(form2 (if (= (length form) 2) '(fail) (third form)))
	(return (string->uninterned-symbol "return"))
	(old-fail (string->uninterned-symbol "old-fail")))
   (expander `(call-with-current-continuation
	       (lambda (,return)
		(let ((,old-fail fail))
		 (set-fail! (lambda () (set-fail! ,old-fail) (,return ,form2)))
		 (let ((v ,form1))
		  (set-fail! ,old-fail)
		  v))))
	     expander))))

(define-macro local-one-value
 ;; needs work: *FAIL?* can potentially be captured.
 (lambda (form expander)
  (unless (or (= (length form) 2) (= (length form) 3))
   (error 'local-one-value "Improper LOCAL-ONE-VALUE: ~s" form))
  (let ((form1 (second form))
	(form2 (if (= (length form) 2) '(fail) (third form)))
	(return (string->uninterned-symbol "return"))
	(old-fail (string->uninterned-symbol "old-fail"))
	(v (string->uninterned-symbol "v")))
   (expander
    `(call-with-current-continuation
      (lambda (,return)
       (let ((,v #f)
	     (,old-fail fail))
	(set-fail!
	 (lambda ()
	  (set-fail! ,old-fail)
	  (,return (cond (*fail?* ,form2) (else (set! *fail?* #t) ,v)))))
	(set! ,v ,form1)
	(set! *fail?* #f)
	(fail))))
    expander))))

(define-macro all-values
 ;; needs work: To eliminate REVERSE.
 (lambda (form expander)
  (let ((values (string->uninterned-symbol "values")))
   (expander
    `(let ((,values '()))
      (for-effects (set! ,values (cons (begin ,@(rest form)) ,values)))
      (reverse ,values))
    expander))))

(define-macro possibly?
 (lambda (form expander)
  (let ((return (string->uninterned-symbol "return"))
	(old-fail (string->uninterned-symbol "old-fail"))
	(v (string->uninterned-symbol "v")))
   (expander
    `(call-with-current-continuation
      (lambda (,return)
       (let ((,old-fail fail))
	(set-fail! (lambda () (set-fail! ,old-fail) (,return #f)))
	(let ((,v (begin ,@(rest form))))
	 (unless ,v (fail))
	 (set-fail! ,old-fail)
	 ,v))))
    expander))))

(define-macro necessarily?
 (lambda (form expander)
  (let ((return (string->uninterned-symbol "return"))
	(old-fail (string->uninterned-symbol "old-fail"))
	(v (string->uninterned-symbol "v"))
	(u (string->uninterned-symbol "u")))
   (expander
    `(call-with-current-continuation
      (lambda (,return)
       (let ((,old-fail fail)
	     (,u #t))
	(set-fail! (lambda () (set-fail! ,old-fail) (,return ,u)))
	(let ((,v (begin ,@(rest form))))
	 (when ,v (set! ,u ,v) (fail))
	 (set-fail! ,old-fail)
	 #f))))
    expander))))

(define-macro upon-failure
 (lambda (form expander)
  (let ((old-fail (string->uninterned-symbol "old-fail")))
   (expander
    `(let ((,old-fail fail))
      (set-fail! (lambda () (set-fail! ,old-fail) ,@(rest form) (fail))))
    expander))))

(define-macro local-set!
 (lambda (form expander)
  (unless (= (length form) 3)
   (error 'local-set! "Improper LOCAL-SET!: ~s" form))
  (let ((p (string->uninterned-symbol "p")))
   (expander `(begin
	       (let ((,p ,(second form)))
		(upon-failure (set! ,(second form) ,p)))
	       (set! ,(second form) ,(third form)))
	     expander))))

(define-macro lazy
 (lambda (form expander)
  (let ((args (string->uninterned-symbol "args")))
   (expander `(lambda ,args (apply ,(second form) ,args)) expander))))

(define-macro define-toggle-button
 (lambda (form expander)
  (unless (and (= (length form) 6) (symbol? (fifth form)))
   (error 'define-toggle-button "Improper DEFINE-TOGGLE-BUTTON: ~s" form))
  (expander `(define-button ,(second form) ,(third form) ,(fourth form)
	      (lambda () ,(fifth form))
	      (lambda ()
	       (set! ,(fifth form) (not ,(fifth form)))
	       (redraw-buttons)
	       (,(sixth form))))
	    expander)))

(define-macro define-radio-buttons
 (lambda (form expander)
  (unless (and (>= (length form) 3)
	       (symbol? (second form))
	       (every (lambda (element)
		       (and (list? element)
			    (= (length element) 4)
			    (symbol? (third element))))
		      (rest (rest (rest form)))))
   (error 'define-radio-buttons "Improper DEFINE-RADIO-BUTTONS: ~s" form))
  (expander `(begin
	      ,@(map (lambda (element)
		      `(define-button ,(first element) ,(second element)
			,(fourth element)
			(lambda () (eq? ,(second form) ',(third element)))
			(lambda ()
			 (set! ,(second form) ',(third element))
			 (redraw-buttons)
			 (,(third form)))))
		     (rest (rest (rest form)))))
	    expander)))

(define-macro define-cycle-button
 (lambda (form expander)
  (unless (and (>= (length form) 6)
	       (symbol? (fourth form))
	       (every (lambda (element)
		       (and (list? element)
			    (= (length element) 2)
			    (symbol? (first element))))
		      (rest (rest (rest (rest (rest form)))))))
   (error 'define-cycle-button "Improper DEFINE-CYCLE-BUTTON: ~s" form))
  (let ((symbols (map first (rest (rest (rest (rest (rest form))))))))
   (expander
    `(define-button ,(second form) ,(third form)
      (lambda ()
       (case ,(fourth form)
	,@(map (lambda (element) `((,(first element)) ,(second element)))
	       (rest (rest (rest (rest (rest form))))))
	(else (fuck-up))))
      #f
      (lambda ()
       (set! ,(fourth form)
	     (case ,(fourth form)
	      ,@(map (lambda (s1 s2) `((,s1) (set! ,(fourth form) ',s2)))
		     symbols
		     (append (rest symbols) (list (first symbols))))
	      (else (fuck-up))))
       (redraw-buttons)
       (,(fifth form))))
    expander))))

(define-macro define-integer-range-buttons
 (lambda (form expander)
  (unless (and (= (length form) 11) (symbol? (sixth form)))
   (error 'define-integer-range-buttons
	  "Improper DEFINE-INTEGER-RANGE-BUTTONS: ~s" form))
  (expander `(begin (define-button ,(second form) ,(third form) ,(ninth form)
		     #f
		     (lambda ()
		      (when (= ,(sixth form) ,(seventh form)) (abort))
		      (set! ,(sixth form) (- ,(sixth form) 1))
		      (redraw-buttons)
		      (,(eleventh form))))
		    (define-button ,(fourth form) ,(fifth form) ,(tenth form)
		     #f
		     (lambda ()
		      (when (= ,(sixth form) ,(eighth form)) (abort))
		      (set! ,(sixth form) (+ ,(sixth form) 1))
		      (redraw-buttons)
		      (,(eleventh form)))))
	    expander)))

(define-macro define-display-pane-application
 ;; (DEFINE-DISPLAY-PANE-APPLICATION
 ;;  NAME
 ;;  DISPLAY-PANE-WIDTH
 ;;  DISPLAY-PANE-HEIGHT
 ;;  PRE-INITIALIZE-PROCEDURE
 ;;  POST-INITIALIZE-PROCEDURE
 ;;  FINALIZE-PROCEDURE
 ;;  REDRAW-PROCEDURE)
 (lambda (form expander)
  (expander
   `(define (,(second form) arguments)
     (let ((stalin? #f)
	   (display-pane-width ,(third form))
	   (display-pane-height ,(fourth form))
	   (pre-initialize-procedure ,(fifth form))
	   (post-initialize-procedure ,(sixth form))
	   (finalize-procedure ,(seventh form))
	   (redraw-procedure ,(eighth form)))
      (set! *post-initialize-procedure* post-initialize-procedure)
      (set! *transcript-pane* #f)
      (set! *echo-pane* #f)
      (set! *status-pane* #f)
      (set! *message-pane* #f)
      (set! *display* (xopendisplay *display-name*))
      (when (null-pointer? *display*)
       (panic "Cannot connect to X server: ~a" (xdisplayname *display-name*)))
      (set! *screen* (xdefaultscreen *display*))
      (set! *root-window* (xrootwindow *display* *screen*))
      (set! *button-width* 0)
      (set! *button-height* 0)
      (cond
       (stalin?
	(set! *white-pixel* (xwhitepixel *display* *screen*))
	(set! *black-pixel* (xblackpixel *display* *screen*)))
       (else
	(set! *background*
	      (xallocnamedcolor *display*
				(xdefaultcolormap *display* *screen*)
				*background-color*))
	(unless (= (first *background*) 1)
	 (panic "Can't allocate background colorcell"))
	(set! *foreground*
	      (xallocnamedcolor *display*
				(xdefaultcolormap *display* *screen*)
				*foreground-color*))
	(unless (= (first *foreground*) 1)
	 (panic "Can't allocate foreground colorcell"))))
      (set! *roman-font* (xloadqueryfont *display* *roman-font-name*))
      (when (null-pointer? *roman-font*)
       (panic "Cannot open font: ~a" *roman-font-name*))
      (set! *bold-font* (xloadqueryfont *display* *bold-font-name*))
      (when (null-pointer? *bold-font*)
       (panic "Cannot open font: ~a" *bold-font-name*))
      (set! *roman-height*
	    (+ (xfontstruct-ascent *roman-font*)
	       (xfontstruct-descent *roman-font*)))
      (set! *bold-height*
	    (+ (xfontstruct-ascent *bold-font*)
	       (xfontstruct-descent *bold-font*)))
      (set! *text-height*
	    (+ (max (xfontstruct-ascent *roman-font*)
		    (xfontstruct-ascent *bold-font*))
	       (max (xfontstruct-descent *roman-font*)
		    (xfontstruct-descent *bold-font*))))
      (set! *roman-baseline* (xfontstruct-descent *roman-font*))
      (set! *bold-baseline* (xfontstruct-descent *bold-font*))
      (set! *text-baseline* (max *roman-baseline* *bold-baseline*))
      (set! *display-pane-width* display-pane-width)
      (set! *display-pane-height* display-pane-height)
      (set! *who-line-height* 0)
      (set! *window*
	    (xcreatesimplewindow
	     *display* *root-window*
	     *window-position-x* *window-position-y*
	     *display-pane-width* *display-pane-height*
	     1
	     (if stalin?
		 *black-pixel*
		 (xcolor-pixel (second *foreground*)))
	     (if stalin?
		 *white-pixel*
		 (xcolor-pixel (second *background*)))))
      (xstorename *display* *window* *program*)
      (xseticonname *display* *window* *program*)
      (set! *display-pane* *window*)
      (xselectinput *display*
		    *display-pane*
		    (bit-or exposuremask
			    pointermotionmask
			    buttonpressmask
			    buttonreleasemask
			    keypressmask))
      (set! *thin-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *thin-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *thin-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *thin-gc* 0 linesolid capround joinround)
      (set! *thin-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *thin-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *thin-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetlineattributes
       *display* *thin-flipping-gc* 0 linesolid capround joinround)
      (xsetfunction *display* *thin-flipping-gc* gxxor)
      (set! *medium-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *medium-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *medium-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *medium-gc* 2 linesolid capround joinround)
      (set! *medium-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *medium-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *medium-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetlineattributes
       *display* *medium-flipping-gc* 2 linesolid capround joinround)
      (xsetfunction *display* *medium-flipping-gc* gxxor)
      (set! *thick-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *thick-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *thick-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *thick-gc* 5 linesolid capround joinround)
      (set! *thick-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *thick-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *thick-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetlineattributes
       *display* *thick-flipping-gc* 5 linesolid capround joinround)
      (xsetfunction *display* *thick-flipping-gc* gxxor)
      (set! *dashed-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *dashed-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *dashed-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *dashed-gc* 0 lineonoffdash capround joinround)
      (set! *dashed-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *dashed-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *dashed-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetlineattributes
       *display* *dashed-flipping-gc* 0 lineonoffdash capround joinround)
      (xsetfunction *display* *dashed-flipping-gc* gxxor)
      (set! *roman-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *roman-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *roman-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetfont
       *display* *roman-gc* (xfontstruct-fid *roman-font*))
      (set! *bold-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *bold-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *bold-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetfont
       *display* *bold-gc* (xfontstruct-fid *bold-font*))
      (set! *bold-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *bold-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *bold-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetfont
       *display* *bold-flipping-gc* (xfontstruct-fid *bold-font*))
      (xsetlineattributes
       *display* *bold-flipping-gc* 0 linesolid capround joinround)
      (xsetfunction *display* *bold-flipping-gc* gxxor)
      (unless stalin?
       (set! *light-gray*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Light Gray"))
       (unless (= (first *light-gray*) 1)
	(panic "Can't allocate light gray colorcell"))
       (set! *light-gray-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *light-gray-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *light-gray-gc*
		       (xcolor-pixel (second *light-gray*)))
       (xsetlineattributes
	*display* *light-gray-gc* 0 linesolid capround joinround)
       (set! *gray*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Gray"))
       (unless (= (first *gray*) 1)
	(panic "Can't allocate gray colorcell"))
       (set! *gray-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *gray-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *gray-gc*
		       (xcolor-pixel (second *gray*)))
       (xsetlineattributes
	*display* *gray-gc* 0 linesolid capround joinround)
       (set! *red*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Red"))
       (unless (= (first *red*) 1)
	(panic "Can't allocate red colorcell"))
       (set! *red-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *red-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *red-gc*
		       (xcolor-pixel (second *red*)))
       (xsetfont
	*display* *red-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *red-gc* 0 linesolid capround joinround)
       (set! *dark-red*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Dark Red"))
       (unless (= (first *dark-red*) 1)
	(panic "Can't allocate dark red colorcell"))
       (set! *dark-red-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *dark-red-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *dark-red-gc*
		       (xcolor-pixel (second *dark-red*)))
       (xsetfont
	*display* *dark-red-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *dark-red-gc* 0 linesolid capround joinround)
       (set! *green*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Green"))
       (unless (= (first *green*) 1)
	(panic "Can't allocate green colorcell"))
       (set! *green-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *green-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *green-gc*
		       (xcolor-pixel (second *green*)))
       (xsetfont
	*display* *green-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *green-gc* 0 linesolid capround joinround)
       (set! *dark-green*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Dark Green"))
       (unless (= (first *dark-green*) 1)
	(panic "Can't allocate dark green colorcell"))
       (set! *dark-green-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *dark-green-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *dark-green-gc*
		       (xcolor-pixel (second *dark-green*)))
       (xsetfont
	*display* *dark-green-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *dark-green-gc* 0 linesolid capround joinround)
       (set! *blue*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Blue"))
       (unless (= (first *blue*) 1)
	(panic "Can't allocate blue colorcell"))
       (set! *blue-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *blue-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *blue-gc*
		       (xcolor-pixel (second *blue*)))
       (xsetfont
	*display* *blue-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *blue-gc* 0 linesolid capround joinround)
       (set! *yellow*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Yellow"))
       (unless (= (first *yellow*) 1)
	(panic "Can't allocate yellow colorcell"))
       (set! *yellow-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *yellow-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *yellow-gc*
		       (xcolor-pixel (second *yellow*)))
       (xsetfont
	*display* *yellow-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *yellow-gc* 0 linesolid capround joinround)
       (set! *violet*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Violet"))
       (unless (= (first *violet*) 1)
	(panic "Can't allocate violet colorcell"))
       (set! *violet-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *violet-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *violet-gc*
		       (xcolor-pixel (second *violet*)))
       (xsetfont
	*display* *violet-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *violet-gc* 0 linesolid capround joinround)
       (set! *orange*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Orange"))
       (unless (= (first *orange*) 1)
	(panic "Can't allocate orange colorcell"))
       (set! *orange-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *orange-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *orange-gc*
		       (xcolor-pixel (second *orange*)))
       (xsetfont
	*display* *orange-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *orange-gc* 0 linesolid capround joinround)
       (set! *dark-orange*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Dark Orange"))
       (unless (= (first *dark-orange*) 1)
	(panic "Can't allocate dark orange colorcell"))
       (set! *dark-orange-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *dark-orange-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *dark-orange-gc*
		       (xcolor-pixel (second *dark-orange*)))
       (xsetfont
	*display* *dark-orange-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *dark-orange-gc* 0 linesolid capround joinround))
      (set! *color-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *color-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *color-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *color-gc* 0 linesolid capround joinround)
      (set! *window-methods* '())
      (set! *abort-button* #f)
      (set! *abort-key* #f)
      (set! *comtab* (make-vector 256 #f))
      (set! *help* '())
      (define-key (control #\h) "Help" help-command)
      (set! *help* '())
      (define-key (control #\n) "Scroll help window down one line"
       help-scroll-down-line-command)
      (define-key (control #\p) "Scroll help window up one line"
       help-scroll-up-line-command)
      (define-key (control #\v) "Scroll help window down one page"
       help-scroll-down-page-command)
      (define-key (meta #\v) "Scroll help window up one page"
       help-scroll-up-page-command)
      (define-key (meta #\<) "Scroll help window to beginning"
       help-scroll-beginning-command)
      (define-key (meta #\>) "Scroll help window to end"
       help-scroll-end-command)
      (set! *help-comtab* *comtab*)
      (set! *comtab* (make-vector 256 #f))
      (set! *prefix* '())
      (set! *status* "Tyi")
      (set! *message* "")
      (set! *redraw-procedure* redraw-procedure)
      (set! *buttons* '())
      (set! *pause?* #f)
      (set! *help?* #f)
      (set! *clear-display-pane?* #t)
      (let ((hints (make-xwmhints)))
       (xwmhints-input! hints 1)
       (xwmhints-flags! hints inputhint)
       (xsetwmhints *display* *window* hints))
      (let ((hints (make-xsizehints)))
       (when *window-position?*
	(xsizehints-x! hints *window-position-x*)
	(xsizehints-y! hints *window-position-y*))
       (xsizehints-min_width! hints *display-pane-width*)
       (xsizehints-max_width! hints *display-pane-width*)
       (xsizehints-min_height! hints *display-pane-height*)
       (xsizehints-max_height! hints *display-pane-height*)
       (xsizehints-flags! hints
			  (if *window-position?*
			      (+ usposition pposition pminsize pmaxsize)
			      (+ pminsize pmaxsize)))
       (xsetwmnormalhints *display* *window* hints))
      (pre-initialize-procedure)
      (set-window-method! *display-pane* 'expose redraw-display-pane)
      (set-window-method! *display-pane* 'buttonpress region-handler)
      (when *transcript-pane*
       (set-window-method!
	*transcript-pane* 'expose redraw-transcript-pane))
      (when *echo-pane*
       (set-window-method! *echo-pane* 'expose redraw-echo-pane))
      (set-kill-application!
       (lambda ()
	(set-kill-application! (lambda () #t))
	(finalize-procedure)
	(when *display*
	 (xfreegc *display* *thin-gc*)
	 (xfreegc *display* *thin-flipping-gc*)
	 (xfreegc *display* *medium-gc*)
	 (xfreegc *display* *medium-flipping-gc*)
	 (xfreegc *display* *thick-gc*)
	 (xfreegc *display* *thick-flipping-gc*)
	 (xfreegc *display* *dashed-gc*)
	 (xfreegc *display* *dashed-flipping-gc*)
	 (xfreegc *display* *roman-gc*)
	 (xfreegc *display* *bold-gc*)
	 (xfreegc *display* *bold-flipping-gc*)
	 (unless stalin?
	  (xfreegc *display* *light-gray-gc*)
	  (xfreegc *display* *gray-gc*)
	  (xfreegc *display* *red-gc*)
	  (xfreegc *display* *dark-red-gc*)
	  (xfreegc *display* *green-gc*)
	  (xfreegc *display* *dark-green-gc*)
	  (xfreegc *display* *blue-gc*)
	  (xfreegc *display* *yellow-gc*)
	  (xfreegc *display* *violet-gc*)
	  (xfreegc *display* *orange-gc*)
	  (xfreegc *display* *dark-orange-gc*)
	  (xfreegc *display* *color-gc*)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *background*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *foreground*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *light-gray*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *gray*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *red*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *dark-red*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *green*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *dark-green*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *blue*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *yellow*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *violet*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *orange*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *dark-orange*))))
		       1
		       0))
	 (xunloadfont *display* (xfontstruct-fid *roman-font*))
	 (xunloadfont *display* (xfontstruct-fid *bold-font*))
	 (xdestroywindow *display* *window*)
	 (xclosedisplay *display*)
	 (set! *display* #f))
	#t))
      (xmapsubwindows *display* *window*)
      (xmapraised *display* *window*)
      (process-events)
      (kill-application)))
   expander)))

(define-macro define-application
 ;; (DEFINE-APPLICATION
 ;;  NAME
 ;;  DISPLAY-PANE-WIDTH
 ;;  DISPLAY-PANE-HEIGHT
 ;;  TRANSCRIPT-LINES
 ;;  BUTTON-ROWS
 ;;  BUTTOM-COLUMNS
 ;;  PRE-INITIALIZE-PROCEDURE
 ;;  POST-INITIALIZE-PROCEDURE
 ;;  FINALIZE-PROCEDURE
 ;;  REDRAW-PROCEDURE
 ;;  LISTENER-PROCEDURE)
 (lambda (form expander)
  (expander
   `(define (,(second form) arguments)
     (let* ((stalin? #f)
	    (display-pane-width ,(third form))
	    (display-pane-height ,(fourth form))
	    (transcript-lines ,(fifth form))
	    (button-rows ,(sixth form))
	    (button-columns ,(seventh form))
	    (button-width
	     (if display-pane-width
		 (- (quotient (+ display-pane-width 4) button-columns)
		    4)
		 100))
	    (width (if display-pane-width
		       (+ display-pane-width 6)
		       (+ (* button-columns (+ button-width 4)) 2)))
	    (pre-initialize-procedure ,(eighth form))
	    (post-initialize-procedure ,(ninth form))
	    (finalize-procedure ,(tenth form))
	    (redraw-procedure ,(eleventh form))
	    (listener-procedure
	     ,(if (= (length form) 12) (twelfth form) '(lambda () #f))))
      (set! *post-initialize-procedure* post-initialize-procedure)
      (set! *transcript-pane* #f)
      (set! *echo-pane* #f)
      (set! *display* (xopendisplay *display-name*))
      (when (null-pointer? *display*)
       (panic "Cannot connect to X server: ~a" (xdisplayname *display-name*)))
      (set! *screen* (xdefaultscreen *display*))
      (set! *root-window* (xrootwindow *display* *screen*))
      (cond
       (stalin?
	(set! *white-pixel* (xwhitepixel *display* *screen*))
	(set! *black-pixel* (xblackpixel *display* *screen*)))
       (else
	(set! *background*
	      (xallocnamedcolor *display*
				(xdefaultcolormap *display* *screen*)
				*background-color*))
	(unless (= (first *background*) 1)
	 (panic "Can't allocate background colorcell"))
	(set! *foreground*
	      (xallocnamedcolor *display*
				(xdefaultcolormap *display* *screen*)
				*foreground-color*))
	(unless (= (first *foreground*) 1)
	 (panic "Can't allocate foreground colorcell"))))
      (set! *roman-font* (xloadqueryfont *display* *roman-font-name*))
      (when (null-pointer? *roman-font*)
       (panic "Cannot open font: ~a" *roman-font-name*))
      (set! *bold-font* (xloadqueryfont *display* *bold-font-name*))
      (when (null-pointer? *bold-font*)
       (panic "Cannot open font: ~a" *bold-font-name*))
      (set! *roman-height*
	    (+ (xfontstruct-ascent *roman-font*)
	       (xfontstruct-descent *roman-font*)))
      (set! *bold-height*
	    (+ (xfontstruct-ascent *bold-font*)
	       (xfontstruct-descent *bold-font*)))
      (set! *text-height*
	    (+ (max (xfontstruct-ascent *roman-font*)
		    (xfontstruct-ascent *bold-font*))
	       (max (xfontstruct-descent *roman-font*)
		    (xfontstruct-descent *bold-font*))))
      (set! *roman-baseline* (xfontstruct-descent *roman-font*))
      (set! *bold-baseline* (xfontstruct-descent *bold-font*))
      (set! *text-baseline* (max *roman-baseline* *bold-baseline*))
      (set! *button-width* button-width)
      (set! *button-height* (+ *text-height* 4))
      (set! *display-pane-width* (- width 6))
      (set! *display-pane-height* display-pane-height)
      (when transcript-lines
       (unless (zero? transcript-lines)
	(set! *transcript-pane-height*
	      (+ (* transcript-lines *text-height*) 4)))
       (set! *echo-pane-height* (+ *text-height* 4)))
      (set! *who-line-height* (+ *text-height* 4))
      (set! *status-pane-width*
	    (+ (max (xtextwidth *roman-font* "Tyi" 3)
		    (xtextwidth *roman-font* "Run" 3)
		    (xtextwidth *roman-font* "Pause" 5)
		    (xtextwidth *roman-font* "Track" 5))
	       4))
      (set! *window*
	    (xcreatesimplewindow
	     *display* *root-window*
	     *window-position-x* *window-position-y*
	     width
	     (if transcript-lines
		 (if (zero? transcript-lines)
		     (+ (* button-rows (+ *button-height* 4))
			*display-pane-height*
			*echo-pane-height*
			*who-line-height*
			14)
		     (+ (* button-rows (+ *button-height* 4))
			*display-pane-height*
			*transcript-pane-height*
			*echo-pane-height*
			*who-line-height*
			18))
		 (+ (* button-rows (+ *button-height* 4))
		    *display-pane-height*
		    *who-line-height*
		    10))
	     1
	     (if stalin?
		 *black-pixel*
		 (xcolor-pixel (second *foreground*)))
	     (if stalin?
		 *white-pixel*
		 (xcolor-pixel (second *background*)))))
      (xstorename *display* *window* *program*)
      (xseticonname *display* *window* *program*)
      (xselectinput *display*
		    *window*
		    (bit-or exposuremask
			    pointermotionmask
			    buttonpressmask
			    buttonreleasemask
			    keypressmask))
      (set! *display-pane*
	    (xcreatesimplewindow
	     *display* *window*
	     2 (+ (* button-rows (+ *button-height* 4)) 2)
	     *display-pane-width* *display-pane-height*
	     1
	     (if stalin?
		 *black-pixel*
		 (xcolor-pixel (second *foreground*)))
	     (if stalin?
		 *white-pixel*
		 (xcolor-pixel (second *background*)))))
      (xselectinput *display*
		    *display-pane*
		    (bit-or exposuremask
			    pointermotionmask
			    buttonpressmask
			    buttonreleasemask
			    keypressmask))
      (when transcript-lines
       (unless (zero? transcript-lines)
	(set! *transcript-pane*
	      (xcreatesimplewindow
	       *display* *window*
	       2
	       (+ (* button-rows (+ *button-height* 4))
		  *display-pane-height*
		  6)
	       *display-pane-width* *transcript-pane-height* 1
	       (if stalin?
		   *black-pixel*
		   (xcolor-pixel (second *foreground*)))
	       (if stalin?
		   *white-pixel*
		   (xcolor-pixel (second *background*)))))
	(xselectinput
	 *display* *transcript-pane* (bit-or exposuremask keypressmask)))
       (set! *echo-pane*
	     (xcreatesimplewindow
	      *display* *window*
	      2
	      (if (zero? transcript-lines)
		  (+ (* button-rows (+ *button-height* 4))
		     *display-pane-height*
		     6)
		  (+ (* button-rows (+ *button-height* 4))
		     *display-pane-height* *transcript-pane-height* 10))
	      *display-pane-width* *echo-pane-height* 1
	      (if stalin?
		  *black-pixel*
		  (xcolor-pixel (second *foreground*)))
	      (if stalin?
		  *white-pixel*
		  (xcolor-pixel (second *background*)))))
       (xselectinput
	*display* *echo-pane* (bit-or exposuremask keypressmask)))
      (set! *status-pane*
	    (xcreatesimplewindow
	     *display* *window*
	     2
	     (+ (* button-rows (+ *button-height* 4))
		*display-pane-height*
		(if transcript-lines
		    (if (zero? transcript-lines)
			(+ *echo-pane-height* 10)
			(+ *transcript-pane-height*
			   *echo-pane-height*
			   14))
		    6))
	     *status-pane-width* *who-line-height*
	     1
	     (if stalin?
		 *black-pixel*
		 (xcolor-pixel (second *foreground*)))
	     (if stalin?
		 *white-pixel*
		 (xcolor-pixel (second *background*)))))
      (xselectinput
       *display* *status-pane* (bit-or exposuremask keypressmask))
      (set! *message-pane*
	    (xcreatesimplewindow
	     *display* *window*
	     (+ *status-pane-width* 6)
	     (+ (* button-rows (+ *button-height* 4))
		*display-pane-height*
		(if transcript-lines
		    (if (zero? transcript-lines)
			(+ *echo-pane-height* 10)
			(+ *transcript-pane-height*
			   *echo-pane-height*
			   14))
		    6))
	     (- width *status-pane-width* 10) *who-line-height*
	     1
	     (if stalin?
		 *black-pixel*
		 (xcolor-pixel (second *foreground*)))
	     (if stalin?
		 *white-pixel*
		 (xcolor-pixel (second *background*)))))
      (xselectinput
       *display* *message-pane* (bit-or exposuremask keypressmask))
      (set! *thin-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *thin-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *thin-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *thin-gc* 0 linesolid capround joinround)
      (set! *thin-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *thin-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *thin-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetlineattributes
       *display* *thin-flipping-gc* 0 linesolid capround joinround)
      (xsetfunction *display* *thin-flipping-gc* gxxor)
      (set! *medium-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *medium-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *medium-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *medium-gc* 2 linesolid capround joinround)
      (set! *medium-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *medium-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *medium-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetlineattributes
       *display* *medium-flipping-gc* 2 linesolid capround joinround)
      (xsetfunction *display* *medium-flipping-gc* gxxor)
      (set! *thick-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *thick-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *thick-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *thick-gc* 5 linesolid capround joinround)
      (set! *thick-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *thick-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *thick-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetlineattributes
       *display* *thick-flipping-gc* 5 linesolid capround joinround)
      (xsetfunction *display* *thick-flipping-gc* gxxor)
      (set! *dashed-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *dashed-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *dashed-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *dashed-gc* 0 lineonoffdash capround joinround)
      (set! *dashed-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *dashed-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *dashed-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetlineattributes
       *display* *dashed-flipping-gc* 0 lineonoffdash capround joinround)
      (xsetfunction *display* *dashed-flipping-gc* gxxor)
      (set! *roman-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *roman-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *roman-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetfont
       *display* *roman-gc* (xfontstruct-fid *roman-font*))
      (set! *bold-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *bold-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *bold-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetfont
       *display* *bold-gc* (xfontstruct-fid *bold-font*))
      (set! *bold-flipping-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *bold-flipping-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetforeground *display* *bold-flipping-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetfont
       *display* *bold-flipping-gc* (xfontstruct-fid *bold-font*))
      (xsetlineattributes
       *display* *bold-flipping-gc* 0 linesolid capround joinround)
      (xsetfunction *display* *bold-flipping-gc* gxxor)
      (unless stalin?
       (set! *light-gray*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Light Gray"))
       (unless (= (first *light-gray*) 1)
	(panic "Can't allocate light gray colorcell"))
       (set! *light-gray-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *light-gray-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *light-gray-gc*
		       (xcolor-pixel (second *light-gray*)))
       (xsetlineattributes
	*display* *light-gray-gc* 0 linesolid capround joinround)
       (set! *gray*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Gray"))
       (unless (= (first *gray*) 1)
	(panic "Can't allocate gray colorcell"))
       (set! *gray-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *gray-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *gray-gc*
		       (xcolor-pixel (second *gray*)))
       (xsetlineattributes
	*display* *gray-gc* 0 linesolid capround joinround)
       (set! *red*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Red"))
       (unless (= (first *red*) 1)
	(panic "Can't allocate red colorcell"))
       (set! *red-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *red-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *red-gc*
		       (xcolor-pixel (second *red*)))
       (xsetfont
	*display* *red-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *red-gc* 0 linesolid capround joinround)
       (set! *dark-red*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Dark Red"))
       (unless (= (first *dark-red*) 1)
	(panic "Can't allocate dark red colorcell"))
       (set! *dark-red-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *dark-red-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *dark-red-gc*
		       (xcolor-pixel (second *dark-red*)))
       (xsetfont
	*display* *dark-red-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *dark-red-gc* 0 linesolid capround joinround)
       (set! *green*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Green"))
       (unless (= (first *green*) 1)
	(panic "Can't allocate green colorcell"))
       (set! *green-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *green-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *green-gc*
		       (xcolor-pixel (second *green*)))
       (xsetfont
	*display* *green-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *green-gc* 0 linesolid capround joinround)
       (set! *dark-green*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Dark Green"))
       (unless (= (first *dark-green*) 1)
	(panic "Can't allocate dark green colorcell"))
       (set! *dark-green-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *dark-green-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *dark-green-gc*
		       (xcolor-pixel (second *dark-green*)))
       (xsetfont
	*display* *dark-green-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *dark-green-gc* 0 linesolid capround joinround)
       (set! *blue*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Blue"))
       (unless (= (first *blue*) 1)
	(panic "Can't allocate blue colorcell"))
       (set! *blue-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *blue-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *blue-gc*
		       (xcolor-pixel (second *blue*)))
       (xsetfont
	*display* *blue-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *blue-gc* 0 linesolid capround joinround)
       (set! *yellow*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Yellow"))
       (unless (= (first *yellow*) 1)
	(panic "Can't allocate yellow colorcell"))
       (set! *yellow-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *yellow-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *yellow-gc*
		       (xcolor-pixel (second *yellow*)))
       (xsetfont
	*display* *yellow-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *yellow-gc* 0 linesolid capround joinround)
       (set! *violet*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Violet"))
       (unless (= (first *violet*) 1)
	(panic "Can't allocate violet colorcell"))
       (set! *violet-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *violet-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *violet-gc*
		       (xcolor-pixel (second *violet*)))
       (xsetfont
	*display* *violet-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *violet-gc* 0 linesolid capround joinround)
       (set! *orange*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Orange"))
       (unless (= (first *orange*) 1)
	(panic "Can't allocate orange colorcell"))
       (set! *orange-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *orange-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *orange-gc*
		       (xcolor-pixel (second *orange*)))
       (xsetfont
	*display* *orange-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *orange-gc* 0 linesolid capround joinround)
       (set! *dark-orange*
	     (xallocnamedcolor *display*
			       (xdefaultcolormap *display* *screen*)
			       "Dark Orange"))
       (unless (= (first *dark-orange*) 1)
	(panic "Can't allocate dark orange colorcell"))
       (set! *dark-orange-gc*
	     (xcreategc *display* *window* 0 (make-xgcvalues)))
       (xsetbackground *display* *dark-orange-gc*
		       (xcolor-pixel (second *background*)))
       (xsetforeground *display* *dark-orange-gc*
		       (xcolor-pixel (second *dark-orange*)))
       (xsetfont
	*display* *dark-orange-gc* (xfontstruct-fid *roman-font*))
       (xsetlineattributes
	*display* *dark-orange-gc* 0 linesolid capround joinround))
      (set! *color-gc*
	    (xcreategc *display* *window* 0 (make-xgcvalues)))
      (xsetbackground *display* *color-gc*
		      (if stalin?
			  *white-pixel*
			  (xcolor-pixel (second *background*))))
      (xsetforeground *display* *color-gc*
		      (if stalin?
			  *black-pixel*
			  (xcolor-pixel (second *foreground*))))
      (xsetlineattributes
       *display* *color-gc* 0 linesolid capround joinround)
      (set! *window-methods* '())
      (set! *abort-button* #f)
      (set! *abort-key* #f)
      (set! *comtab* (make-vector 256 #f))
      (set! *help* '())
      (define-key (control #\h) "Help" help-command)
      (set! *help* '())
      (define-key (control #\n) "Scroll help window down one line"
       help-scroll-down-line-command)
      (define-key (control #\p) "Scroll help window up one line"
       help-scroll-up-line-command)
      (define-key (control #\v) "Scroll help window down one page"
       help-scroll-down-page-command)
      (define-key (meta #\v) "Scroll help window up one page"
       help-scroll-up-page-command)
      (define-key (meta #\<) "Scroll help window to beginning"
       help-scroll-beginning-command)
      (define-key (meta #\>) "Scroll help window to end"
       help-scroll-end-command)
      (set! *help-comtab* *comtab*)
      (set! *comtab* (make-vector 256 #f))
      (when transcript-lines
       (set! *transcript* '())
       (set! *input* "")
       (set! *input-position* 0)
       (let ((help *help*))
	(for-each
	 (lambda (character)
	  (define-key character
	   "Enter the typed character into the echo pane"
	   (lambda () (echo-pane-insert-character-command character))))
	 (append
	  (string->list
	   "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
	  (string->list
	   "1234567890-=\\`!@#$%^&*()_+|~[]{};':\",./<>? ")))
	(set! *help* help))
       (define-key (control #\a)
	"Move the cursor to the beginning of the echo pane"
	echo-pane-beginning-of-line-command)
       (define-key (control #\b)
	"Move the cursor backward one character in the echo pane"
	echo-pane-backward-char-command)
       (define-key (control #\d)
	"Delete the character after the cursor in the echo pane"
	echo-pane-delete-char-command)
       (define-key (control #\e)
	"Move the cursor to the end of the echo pane"
	echo-pane-end-of-line-command)
       (define-key (control #\f)
	"Move the cursor forward one character in the echo pane"
	echo-pane-forward-char-command)
       (define-key (control #\k)
	"Delete all characters after the cursor in the echo pane"
	echo-pane-kill-line-command)
       (define-key delete
	"Delete the character before the cursor in the echo pane"
	echo-pane-backward-delete-char-command)
       (define-key return
	"Process the input in the echo pane"
	(lambda ()
	 (set! *transcript* (cons (list 'user *input*) *transcript*))
	 (listener-procedure)
	 (set! *input* "")
	 (set! *input-position* 0)
	 (redraw-transcript-pane)
	 (redraw-echo-pane)))
       (define-key (meta #\b)
	"Move the cursor backward one word in the echo pane"
	echo-pane-backward-word-command)
       (define-key (meta #\d)
	"Delete the word after the cursor in the echo pane"
	echo-pane-kill-word-command)
       (define-key (meta #\f)
	"Move the cursor forward one word in the echo pane"
	echo-pane-forward-word-command)
       (define-key (meta delete)
	"Delete the word before the cursor in the echo pane"
	echo-pane-backward-kill-word-command))
      (set! *prefix* '())
      (set! *status* "Tyi")
      (set! *message* "")
      (set! *redraw-procedure* redraw-procedure)
      (set! *buttons* '())
      (set! *pause?* #f)
      (set! *help?* #f)
      (set! *clear-display-pane?* #t)
      (let ((hints (make-xwmhints)))
       (xwmhints-input! hints 1)
       (xwmhints-flags! hints inputhint)
       (xsetwmhints *display* *window* hints))
      (let ((hints (make-xsizehints))
	    (height (if transcript-lines
			(if (zero? transcript-lines)
			    (+ (* button-rows (+ *button-height* 4))
			       *display-pane-height*
			       *echo-pane-height*
			       *who-line-height*
			       14)
			    (+ (* button-rows (+ *button-height* 4))
			       *display-pane-height*
			       *transcript-pane-height*
			       *echo-pane-height*
			       *who-line-height*
			       18))
			(+ (* button-rows (+ *button-height* 4))
			   *display-pane-height*
			   *who-line-height*
			   10))))
       (when *window-position?*
	(xsizehints-x! hints *window-position-x*)
	(xsizehints-y! hints *window-position-y*))
       (xsizehints-min_width! hints width)
       (xsizehints-max_width! hints width)
       (xsizehints-min_height! hints height)
       (xsizehints-max_height! hints height)
       (xsizehints-flags! hints
			  (if *window-position?*
			      (+ usposition pposition pminsize pmaxsize)
			      (+ pminsize pmaxsize)))
       (xsetwmnormalhints *display* *window* hints))
      (pre-initialize-procedure)
      (set-window-method! *display-pane* 'expose redraw-display-pane)
      (set-window-method! *display-pane* 'buttonpress region-handler)
      (when *transcript-pane*
       (set-window-method!
	*transcript-pane* 'expose redraw-transcript-pane))
      (when *echo-pane*
       (set-window-method! *echo-pane* 'expose redraw-echo-pane))
      (set-window-method! *status-pane* 'expose redraw-status-pane)
      (set-window-method! *message-pane* 'expose redraw-message-pane)
      (set-kill-application!
       (lambda ()
	(set-kill-application! (lambda () #t))
	(finalize-procedure)
	(when *display*
	 (xfreegc *display* *thin-gc*)
	 (xfreegc *display* *thin-flipping-gc*)
	 (xfreegc *display* *medium-gc*)
	 (xfreegc *display* *medium-flipping-gc*)
	 (xfreegc *display* *thick-gc*)
	 (xfreegc *display* *thick-flipping-gc*)
	 (xfreegc *display* *dashed-gc*)
	 (xfreegc *display* *dashed-flipping-gc*)
	 (xfreegc *display* *roman-gc*)
	 (xfreegc *display* *bold-gc*)
	 (xfreegc *display* *bold-flipping-gc*)
	 (unless stalin?
	  (xfreegc *display* *light-gray-gc*)
	  (xfreegc *display* *gray-gc*)
	  (xfreegc *display* *red-gc*)
	  (xfreegc *display* *dark-red-gc*)
	  (xfreegc *display* *green-gc*)
	  (xfreegc *display* *dark-green-gc*)
	  (xfreegc *display* *blue-gc*)
	  (xfreegc *display* *yellow-gc*)
	  (xfreegc *display* *violet-gc*)
	  (xfreegc *display* *orange-gc*)
	  (xfreegc *display* *dark-orange-gc*)
	  (xfreegc *display* *color-gc*)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *background*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *foreground*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *light-gray*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *gray*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *red*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *dark-red*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *green*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *dark-green*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *blue*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *yellow*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *violet*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *orange*))))
		       1
		       0)
	  (xfreecolors *display*
		       (xdefaultcolormap *display* *screen*)
		       (unsigned-list->unsigneda
			(list (xcolor-pixel (second *dark-orange*))))
		       1
		       0))
	 (xunloadfont *display* (xfontstruct-fid *roman-font*))
	 (xunloadfont *display* (xfontstruct-fid *bold-font*))
	 (xdestroywindow *display* *window*)
	 (xclosedisplay *display*)
	 (set! *display* #f))
	#t))
      (xmapsubwindows *display* *window*)
      (xmapraised *display* *window*)
      (process-events)
      (kill-application)))
   expander)))

(define-macro define-command
 (lambda (form expander)
  (unless (and (list? form)
	       (>= (length form) 2)
	       (valid-command-arguments? (second form)))
   (error 'define-command "Improper DEFINE-COMMAND: ~s" form))
  (define (valid-command-arguments? l)
   (define (valid-optional-parameter? l)
    (and (list? l)
	 (= (length l) 4)
	 (symbol? (first l))
	 (string? (second l))))
   (define (valid-required-parameter? l)
    (and (list? l)
	 (= (length l) 3)
	 (symbol? (first l))
	 (string? (second l))))
   (define (order-ok-optional? l)
    (or (null? l)
	(and (eq? (first (first l)) 'optional)
	     (order-ok-optional? (rest l)))
	(and (eq? (first (first l)) 'rest)
	     (null? (rest l)))))
   (define (order-ok-required? l)
    (or (null? l)
	(and (eq? (first (first l)) 'required)
	     (order-ok-required? (rest l)))
	(and (eq? (first (first l)) 'optional)
	     (order-ok-optional? (rest l)))
	(and (eq? (first (first l)) 'rest)
	     (null? (rest l)))))
   (define (order-ok? l)
    (or (null? l)
	(and (or (eq? (first (first l)) 'any-number)
		 (eq? (first (first l)) 'at-least-one)
		 (eq? (first (first l)) 'at-most-one)
		 (eq? (first (first l)) 'exactly-one))
	     (order-ok? (rest l)))
	(and (eq? (first (first l)) 'required)
	     (order-ok-required? (rest l)))
	(and (eq? (first (first l)) 'optional)
	     (order-ok-optional? (rest l)))
	(and (eq? (first (first l)) 'rest)
	     (null? (rest l)))))
   (and
    (list? l)
    (>= (length l) 1)
    (symbol? (first l))
    (every
     (lambda (l)
      (and
       (list? l)
       (>= (length l) 1)
       (or (and (or (eq? (first l) 'exactly-one) (eq? (first l) 'at-most-one))
		(>= (length l) 2)
		(every
		 (lambda (l)
		  (and (list? l)
		       (>= (length l) 2)
		       (string? (first l))
		       (symbol? (second l))
		       (every valid-optional-parameter? (rest (rest l)))))
		 (rest l)))
	   (and (or (eq? (first l) 'at-least-one) (eq? (first l) 'any-number))
		(>= (length l) 2)
		(every
		 (lambda (l)
		  (and (list? l)
		       (>= (length l) 2)
		       (string? (first l))
		       (symbol? (second l))
		       (every valid-required-parameter? (rest (rest l)))))
		 (rest l)))
	   (and (or (eq? (first l) 'required) (eq? (first l) 'rest))
		(= (length l) 2)
		(valid-required-parameter? (second l)))
	   (and (eq? (first l) 'optional)
		(= (length l) 2)
		(valid-optional-parameter? (second l))))))
     (rest l))
    (order-ok? (rest l))))
  (define (command-usage l)
   (define (command-usage1 l)
    (let ((s (let loop ((l l))
	      (define (command-usage l)
	       (string-append
		"-"
		(first l)
		(let loop ((l (rest (rest l))))
		 (cond
		  ((null? l) "")
		  ((null? (rest l)) (string-append " " (second (first l))))
		  (else
		   (string-append " " (second (first l)) (loop (rest l))))))))
	      (if (null? (rest l))
		  (command-usage (first l))
		  (string-append
		   (command-usage (first l)) "|" (loop (rest l)))))))
     (if (= (length l) 1) s (string-append "[" s "]"))))
   (if (null? l)
       ""
       (case (first (first l))
	((any-number)
	 (string-append " ["
			(command-usage1 (rest (first l)))
			"]*"
			(command-usage (rest l))))
	((at-least-one)
	 (string-append " ["
			(command-usage1 (rest (first l)))
			"]+"
			(command-usage (rest l))))
	((at-most-one)
	 (string-append
	  " [" (command-usage1 (rest (first l))) "]" (command-usage (rest l))))
	((exactly-one)
	 (string-append
	  " " (command-usage1 (rest (first l))) (command-usage (rest l))))
	((required)
	 (string-append " "
			(second (second (first l)))
			(command-usage (rest l))))
	((optional)
	 (string-append " ["
			(second (second (first l)))
			(command-usage (rest l)) "]"))
	((rest) (string-append " [" (second (second (first l))) "]*"))
	(else (fuck-up)))))
  (define (command-bindings l)
   (if (null? l)
       '()
       (case (first (first l))
	((any-number at-least-one)
	 (append (map-reduce append
			     '()
			     (lambda (l)
			      (cons (list (second l) #f)
				    (map (lambda (l) (list (first l) ''()))
					 (rest (rest l)))))
			     (rest (first l)))
		 (command-bindings (rest l))))
	((at-most-one exactly-one)
	 (append (map-reduce
		  append
		  '()
		  (lambda (l)
		   (cons (list (second l) #f)
			 (map (lambda (l) (list (first l) (fourth l)))
			      (rest (rest l)))))
		  (rest (first l)))
		 (command-bindings (rest l))))
	((required) (cons (list (first (second (first l))) #f)
			  (command-bindings (rest l))))
	((optional) (cons (list (first (second (first l)))
				(fourth (second (first l))))
			  (command-bindings (rest l))))
	((rest) (cons (list (first (second (first l))) ''())
		      (command-bindings (rest l))))
	(else (fuck-up)))))
  (define (command-keyword-argument-parser l)
   (cons
    `(let loop ()
      (unless (null? arguments)
       (cond
	,@(let loop ((l l))
	   (if (null? l)
	       '(((string=? (first arguments) "-usage") (usage)))
	       (case (first (first l))
		((any-number at-least-one)
		 (append
		  (map (lambda (l)
			`((string=? (first arguments)
				    ,(string-append "-" (first l)))
			  (set! arguments (rest arguments))
			  (set! ,(second l) #t)
			  ,@(map-reduce
			     append
			     '()
			     (lambda (l)
			      `((when (null? arguments) (usage))
				(set! ,(first l)
				      (cons (,(third l) (first arguments) usage)
					    ,(first l)))
				(set! arguments (rest arguments))))
			     (rest (rest l)))
			  (loop)))
		       (rest (first l)))
		  (loop (rest l))))
		((at-most-one exactly-one)
		 (append
		  (map (lambda (l1)
			`((string=? (first arguments)
				    ,(string-append "-" (first l1)))
			  (set! arguments (rest arguments))
			  (when (or ,@(map second (rest (first l)))) (usage))
			  (set! ,(second l1) #t)
			  ,@(map-reduce
			     append
			     '()
			     (lambda (l)
			      `((when (null? arguments) (usage))
				(set! ,(first l)
				      (,(third l) (first arguments) usage))
				(set! arguments (rest arguments))))
			     (rest (rest l1)))
			  (loop)))
		       (rest (first l)))
		  (loop (rest l))))
		((required optional rest) (loop (rest l)))
		(else (fuck-up))))))))
    (let loop ((l l))
     (if (null? l)
	 '()
	 (case (first (first l))
	  ((at-least-one exactly-one)
	   (cons `(unless (or ,@(map second (rest (first l)))) (usage))
		 (loop (rest l))))
	  ((at-most-one any-number required optional rest) (loop (rest l)))
	  (else (fuck-up)))))))
  (define (command-positional-argument-parser l)
   (let loop ((l l))
    (if (null? l)
	'((unless (null? arguments) (usage)))
	(case (first (first l))
	 ((any-number at-least-one at-most-one exactly-one) (loop (rest l)))
	 ((required)
	  (append
	   `((when (null? arguments) (usage))
	     (set! ,(first (second (first l)))
		   (,(third (second (first l))) (first arguments) usage))
	     (set! arguments (rest arguments)))
	   (loop (rest l))))
	 ((optional)
	  (cons `(unless (null? arguments)
		  (set! ,(first (second (first l)))
			(,(third (second (first l))) (first arguments) usage))
		  (set! arguments (rest arguments)))
		(loop (rest l))))
	 ((rest)
	  `((let loop ()
	     (unless (null? arguments)
	      (set! ,(first (second (first l)))
		    (cons (,(third (second (first l))) (first arguments) usage)
			  ,(first (second (first l)))))
	      (set! arguments (rest arguments))
	      (loop)))))
	 (else (fuck-up))))))
  (expander
   `(define (,(first (second form)) arguments)
     (define (string-argument string usage) string)
     (define (integer-argument string usage)
      (let ((integer (string->number string)))
       (unless (integer? integer) (usage))
       integer))
     (define (real-argument string usage)
      (let ((real (string->number string)))
       (unless (real? real) (usage))
       real))
     (let ((program (first arguments)))
      (define (usage)
       (format
	stderr-port
	,(string-append "usage: ~a" (command-usage (rest (second form))) "~%")
	program)
       (exit -1))
      (set! arguments (rest arguments))
      (let ,(command-bindings (rest (second form)))
       ,@(command-keyword-argument-parser (rest (second form)))
       ,@(command-positional-argument-parser (rest (second form)))
       ,@(rest (rest form)))))
   expander)))

;;; Tam V'Nishlam Shevah L'El Borei Olam
